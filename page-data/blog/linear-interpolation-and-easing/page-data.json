{
    "componentChunkName": "component---src-templates-blog-post-template-js",
    "path": "/blog/linear-interpolation-and-easing/",
    "result": {"data":{"markdownRemark":{"html":"<p><img src=\"/static/cover-e0488112855c57f0d99868b9effcba50.gif\" alt=\"Different types of easing animation. Image by Author\"></p>\n<p>Easing makes animation look more natural and professional. If you use After Effects, you are probably familiar with Graph Editor and adjusting curve shapes to apply easing. In CSS, you can very easily apply multiple types of easing. How about JavaScript? You can simply install and use some of the popular animation libraries.</p>\n<p>But in this post, instead of just showing you how to use these libraries, I want to show you how to apply your own easing from scratch without using any library. Well, except for the <a href=\"https://p5js.org\">p5js</a> library we will use to create Canvas-based graphics. But that's not mandatory. You can simply use Canvas API if you want.</p>\n<p>We will start from a very basic linear motion to all kinds of easing animation. There are several ways to create convincing animation. You can go with physics-based animation where you define different forces such as gravity, friction, etc. to simulate real world behavior, but in this post I will only focus on using simple linear interpolation and easing curves.</p>\n<h2>Linear Motion</h2>\n<p>Let's first set up our sketch with a few variables. We will animate the ellipse from the left to the right side of the screen. Here is the basic setup:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">,</span> y\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createCanvas</span><span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  x <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n  y <span class=\"token operator\">=</span> height<span class=\"token operator\">/</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">background</span><span class=\"token punctuation\">(</span><span class=\"token number\">220</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The most straight forward way to move it is to just increment <code class=\"language-text\">x</code> each frame like below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">background</span><span class=\"token punctuation\">(</span><span class=\"token number\">220</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// update animation</span>\n  x <span class=\"token operator\">+=</span> <span class=\"token number\">5</span>\n  <span class=\"token comment\">// reset x</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> width <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"/static/1-linear-64aa04b769e0e396fc0ab66e15659f7f.gif\" alt=\"Linear motion. Image by Author\"></p>\n<p>Here, <code class=\"language-text\">25</code> is the speed of the movement. The circle moves 5 pixels each frame, and when it reaches the end, it will jump back to the beginning position. If you want to make it move faster, simply increase the speed by changing <code class=\"language-text\">5</code> to <code class=\"language-text\">10</code>, for example.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">x <span class=\"token operator\">+=</span> <span class=\"token number\">10</span> <span class=\"token comment\">// move 10 px per frame</span></code></pre></div>\n<p>This is pretty cool, but it is a linear motion and looks very mechanical and dull. So let's move on.</p>\n<h2>Simple Method (but not the best)</h2>\n<p>Here is a chop I learned early in my creative coding practice. A quick way to apply easing is by self-updating a value little by little every frame with <code class=\"language-text\">lerp()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">x <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> destination<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span></code></pre></div>\n<p>We update <code class=\"language-text\">x</code> each frame between its current value and the destination by an amount between 0 and 1.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">background</span><span class=\"token punctuation\">(</span><span class=\"token number\">220</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// update animation</span>\n  x  <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> width <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// reset x</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> width <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"/static/2-self-update-d98a80670d8caeb166b9be2d421bb96a.gif\" alt=\"Self-updating lerp. Image by Author\"></p>\n<p>This method is great in that it is very simple to set up and it gets the job done most of the time. In fact, this is the method that I used in <a href=\"/blog/animate-word-by-word-in-p5js/\">my post on animating text a year ago</a>, but this is not really how the <code class=\"language-text\">lerp</code> or linear interpolation function is supposed to be used because it's not really linear, and there are other problems, too.</p>\n<p>First, you might have already noticed that it takes very long time for <code class=\"language-text\">x</code> to reset back to <code class=\"language-text\">50</code>, if at all. Well, mathematically, it will never reach the end value, which in our case is <code class=\"language-text\">width - 50</code> because it is always moving 5 percent of the remaining distance. If it resets after some time, that's probably due to the float point error in JavaScript.</p>\n<p>Also, you don't really have much control other than adjusting the third parameter - the amount of interpolation. So, if you want to try different types of easing, it will be very difficult, if not impossible. I mean, it's a quick and dirty way of apply easing without writing extra lines of code, so I think it has its uses, but we can do better and that's the whole point of this post.</p>\n<h2>Keep Linear Interpolation Linear</h2>\n<p>First of all, let's change our frame-based animation to time-based, so that our animation duration is consistent no matter what frame rate is being used. We will introduce <code class=\"language-text\">deltaTime</code> variable. This is what p5js library provides to us, but creating one for yourself is also relatively easy. I have explained the basics in <a href=\"/blog/p5js-animate-with-deltatime/\">my other post</a>. Please check it out if you want to learn more. I have updated the code so that it uses <code class=\"language-text\">deltaTime</code> instead of relying on frame count:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">background</span><span class=\"token punctuation\">(</span><span class=\"token number\">220</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// deltaTime is in millis, so convert to sec</span>\n  <span class=\"token keyword\">const</span> dt <span class=\"token operator\">=</span> deltaTime <span class=\"token operator\">*</span> <span class=\"token number\">0.001</span>\n  \n  <span class=\"token comment\">// update animation</span>\n  x <span class=\"token operator\">+=</span> dt <span class=\"token operator\">*</span> <span class=\"token number\">300</span>\n  \n  <span class=\"token comment\">// reset x</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> width <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the code above, <code class=\"language-text\">deltaTime</code> variable returns you the time it takes between last frame and current frame in milliseconds, but I prefer to use seconds as my unit, so I am multiplying <code class=\"language-text\">0.001</code>. This is just optional. One other important change is how we increment <code class=\"language-text\">x</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">x <span class=\"token operator\">+=</span> dt <span class=\"token operator\">*</span> <span class=\"token number\">300</span></code></pre></div>\n<p>Here, the number <code class=\"language-text\">300</code> is the speed of <code class=\"language-text\">x</code> changing. It is currently moving 300 pixels per second. So, now we are back to linear motion, but the set up is different that we are now using time-based animation, and it is independent from the frame rate.</p>\n<h2>Apply Easing Functions</h2>\n<p>Instead of directly interpolating <code class=\"language-text\">x</code> like early examples, we will introduce <code class=\"language-text\">t</code> that will be used as the interpolation amount, the third parameter in the <code class=\"language-text\">lerp</code> function. We introduce <code class=\"language-text\">startX</code> and <code class=\"language-text\">endX</code> variables. This way, we maintain that the lerp will indeed be linear. We also introduce two more variables, <code class=\"language-text\">elapsed</code> to keep track of time elapsed in seconds, and <code class=\"language-text\">duration</code> to define the total duration of our animation. By <code class=\"language-text\">t = elapsed/duration</code>, we make sure <code class=\"language-text\">t</code> will move from 0 to 1 for the duration we defined.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">,</span> y\n<span class=\"token keyword\">let</span> startX\n<span class=\"token keyword\">let</span> endX\n\n<span class=\"token keyword\">let</span> elapsed\n<span class=\"token keyword\">let</span> duration\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createCanvas</span><span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  x <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n  y <span class=\"token operator\">=</span> height<span class=\"token operator\">/</span><span class=\"token number\">2</span>\n  startX <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n  endX <span class=\"token operator\">=</span> width <span class=\"token operator\">-</span> <span class=\"token number\">50</span>\n  \n  elapsed <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// in seconds</span>\n  duration <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span> <span class=\"token comment\">// in seconds</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">background</span><span class=\"token punctuation\">(</span><span class=\"token number\">220</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> dt <span class=\"token operator\">=</span> deltaTime <span class=\"token operator\">*</span> <span class=\"token number\">0.001</span>\n    \n  <span class=\"token comment\">// update time and animation</span>\n  elapsed <span class=\"token operator\">+=</span> dt\n  <span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> elapsed<span class=\"token operator\">/</span>duration\n  x <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>startX<span class=\"token punctuation\">,</span> endX<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// reset time</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elapsed <span class=\"token operator\">>=</span> duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    elapsed <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    x <span class=\"token operator\">=</span> startX\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have now time-based linear animation working with <code class=\"language-text\">lerp</code>. The next thing we need to do is to decide what happens for the duration. This is what we call <em>spacing</em> in animation terms, and that's what easing functions are for. Here is an example of such easing functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">easeInOutSine</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The function above smoothes out the change of the value <code class=\"language-text\">x</code> at the beginning and near the end. I took this function from <a href=\"https://easings.net\">https://easings.net</a>. This website is a great resource that provides you with all kinds of easing functions, so do check it out.</p>\n<p>Now, when we interpolate the <code class=\"language-text\">x</code> value, instead of using <code class=\"language-text\">t</code> as is, which is linear, we will apply easing first and then interpolate the <code class=\"language-text\">x</code>. This way, we keep <code class=\"language-text\">t</code> linear, but the change in <code class=\"language-text\">x</code> will have easing applied. Again, <code class=\"language-text\">t</code> always goes from 0 to 1 even after applying easing. What matters now is what happens in-between.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">x <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>startX<span class=\"token punctuation\">,</span> endX<span class=\"token punctuation\">,</span> <span class=\"token function\">easeInOutSine</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The full code is below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">,</span> y\n<span class=\"token keyword\">let</span> startX\n<span class=\"token keyword\">let</span> endX\n\n<span class=\"token keyword\">let</span> elapsed\n<span class=\"token keyword\">let</span> duration\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createCanvas</span><span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  x <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n  y <span class=\"token operator\">=</span> height<span class=\"token operator\">/</span><span class=\"token number\">2</span>\n  startX <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n  endX <span class=\"token operator\">=</span> width <span class=\"token operator\">-</span> <span class=\"token number\">50</span>\n  \n  elapsed <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// in seconds</span>\n  duration <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span> <span class=\"token comment\">// in seconds</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">background</span><span class=\"token punctuation\">(</span><span class=\"token number\">220</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> dt <span class=\"token operator\">=</span> deltaTime <span class=\"token operator\">*</span> <span class=\"token number\">0.001</span>\n    \n  <span class=\"token comment\">// update time and animation</span>\n  elapsed <span class=\"token operator\">+=</span> dt\n  <span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> elapsed<span class=\"token operator\">/</span>duration\n  x <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span>startX<span class=\"token punctuation\">,</span> endX<span class=\"token punctuation\">,</span> <span class=\"token function\">easeInOutSine</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// reset time</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elapsed <span class=\"token operator\">>=</span> duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    elapsed <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    x <span class=\"token operator\">=</span> startX\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">easeInOutSine</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"/static/3-ease-inout-sine-6a6254f6f77379cae2bab0a68520ef99.gif\" alt=\"Ease In Out Sine. Image by Author\"></p>\n<p>We now have control over many asepect of our animation - the start value and end value we are animating, the total duration of the animation, as well as the type of easing we want to apply. So play with different duration, different start/end values, and find different easing functions. Here is a super fun bouncy easing I found from <a href=\"https://easings.net\">https://easings.net</a> again. We don't have to tweak any of our code because this easing function also takes the same <code class=\"language-text\">x</code> as the only parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">easeOutBounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">7.5625</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> d1 <span class=\"token operator\">=</span> <span class=\"token number\">2.75</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> d1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">*</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> d1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-=</span> <span class=\"token number\">1.5</span> <span class=\"token operator\">/</span> d1<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token number\">0.75</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">2.5</span> <span class=\"token operator\">/</span> d1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-=</span> <span class=\"token number\">2.25</span> <span class=\"token operator\">/</span> d1<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token number\">0.9375</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-=</span> <span class=\"token number\">2.625</span> <span class=\"token operator\">/</span> d1<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token number\">0.984375</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"/static/4-ease-out-bounce-0d4559238f443dc72131393ec90c1ea6.gif\" alt=\"Ease Out Bounce. Image by Author\"></p>\n<h2>Robert Penner's Easing Equations</h2>\n<p>When you do research on easing functions, you may find the easing functions are described in different shapes, so-called \"Penner Easing,\" such as this one that takes four parameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">easeInOutCubic</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">/=</span> d <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">*</span> t <span class=\"token operator\">*</span> t <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">*</span> t <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The ingredients are the same. Here, <code class=\"language-text\">t</code> is elapsed time, <code class=\"language-text\">b</code> is start value, <code class=\"language-text\">c</code> is change in value, in our example, that wil be <code class=\"language-text\">endX - startX</code>, and lastly <code class=\"language-text\">d</code> is duration. We already have all the data, so let's rewrite our code for this new easing function.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> startX<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> endX<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> elapsed<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> duration<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createCanvas</span><span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  x <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n  y <span class=\"token operator\">=</span> height <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  startX <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n  endX <span class=\"token operator\">=</span> width <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n\n  elapsed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// in seconds</span>\n  duration <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// in seconds</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">background</span><span class=\"token punctuation\">(</span><span class=\"token number\">220</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> dt <span class=\"token operator\">=</span> deltaTime <span class=\"token operator\">*</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// update time and animation</span>\n  elapsed <span class=\"token operator\">+=</span> dt<span class=\"token punctuation\">;</span>\n  x <span class=\"token operator\">=</span> <span class=\"token function\">easeInOutCubic</span><span class=\"token punctuation\">(</span>elapsed<span class=\"token punctuation\">,</span> startX<span class=\"token punctuation\">,</span> endX <span class=\"token operator\">-</span> startX<span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// reset time</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elapsed <span class=\"token operator\">>=</span> duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    elapsed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> startX<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// t: elapsed time</span>\n<span class=\"token comment\">// b: start value</span>\n<span class=\"token comment\">// c: change in value (end value - start value)</span>\n<span class=\"token comment\">// d: duration</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">easeInOutCubic</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">/=</span> d <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">*</span> t <span class=\"token operator\">*</span> t <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">*</span> t <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"/static/5-penner-easing-3b8261bd9e2ae3cd84d987996b93cd0f.gif\" alt=\"With Penner easing function. Image by Author\"></p>\n<p>Now, it's just a matter of finding an easing equation that suits your need. As long as you can come up with an equation that goes from 0 to 1, you can also create your own easing function. A website tool like <a href=\"https://www.desmos.com/\">https://www.desmos.com/</a> will be useful.</p>\n<p>Hope you have fun with easing, and follow me for more stories like this. I write about creative coding for artists and designers.</p>\n<h2>References</h2>\n<p>The ideas described in this post was all from great people who shared their knowledge online. Here are some I learned a lot from:</p>\n<ul>\n<li>This is one of the most important reference out there, and what I based easing functions on: <a href=\"http://robertpenner.com/easing/\">http://robertpenner.com/easing/</a></li>\n<li>I took easing functions from this website as well: <a href=\"https://easings.net\">https://easings.net</a></li>\n<li>If you want a deep dive in animation and manipulating time, check this out: <a href=\"https://acko.net/blog/animate-your-way-to-glory/\">https://acko.net/blog/animate-your-way-to-glory/</a></li>\n<li>If you have a fast moving object, it may go past the boundary you set. In that case, check this page on how to fix time step: <a href=\"https://gafferongames.com/post/fix_your_timestep/\">https://gafferongames.com/post/fix_your_timestep/</a></li>\n</ul>","excerpt":"Different types of easing animation. Image by Author Easing makes animation look more natural and professional. If you use After Effects…","frontmatter":{"slug":"/blog/linear-interpolation-and-easing/","title":"Improve Your Animation With Easing Functions","subtitle":"How to use linear interpolation correctly with easing functions","date":"January 14, 2022","tags":["p5js","animation","easing","javascript","creative coding"],"featuredImage":{"publicURL":"/static/8188ca982aa6cb2493cf22001c0f74af/thumb.png"}}}},"pageContext":{"slug":"/blog/linear-interpolation-and-easing/"}},
    "staticQueryHashes": ["1139398070","1696241065"]}