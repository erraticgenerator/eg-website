{"componentChunkName":"component---src-templates-blog-post-template-js","path":"/blog/create-and-interact-with-custom-paths-in-p5js/","result":{"data":{"markdownRemark":{"html":"<p><figure class=\"md-figure\"><img src=\"/static/2-2e49418a25d34c86c58b2e9424ef7c94.gif\"><figcaption>What we will build in this post</figcaption></figure></p>\n<p>In this post, I'd like to show you how you can interactively create custom paths with the mouse in p5js. This can be handy if you are building a design tool for yourself or others. It will serve as a basic structure for more complex interactions. If you are not familiar with <a href=\"https://p5js.org\">the p5js library</a>, you should still be able to apply the same logic to other JavaScript libraries because the way a path works in Canvas libraries are pretty much the same or very similar. </p>\n<h2>Paths in p5js</h2>\n<p>A path is made up of points, and is a basic building block of vector graphics. Think of it as Adobe Illustrator's Pen tool. You can create a path only using a straight line, or more often than not, we create paths with bezier curves.</p>\n<p>Here is how you can draw a path that is made up of straight line segments.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">beginShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">vertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">vertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">vertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...add more vertices...</span>\n<span class=\"token function\">endShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you need a curve, you have a few options. <code class=\"language-text\">quadraticVertex()</code> will give you a single control point so it is easy to use but will be difficult to fit complex shapes. <code class=\"language-text\">curveVertex()</code> and <code class=\"language-text\">bezierVertex()</code> each has two control points, which gives you more flexibility. Bezier curves are more difficult to use, and will require some experience before using them fluently. I usually use <code class=\"language-text\">curveVertex()</code> for simple interactive drawing applications because I cannot assume potential users' experience. I can also just focus on drawing and it will create a very smooth curve. Here are some tips for using <code class=\"language-text\">curveVertex()</code> You need at least four vertices to see the curve on screen because first and last vertex are used as control points. One easy trick to draw smooth and continuous curve is just to repeat the first and last vertex as below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">beginShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">curveVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// repeat first vertex</span>\n<span class=\"token function\">curveVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">curveVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">curveVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">350</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">curveVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">curveVertex</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// repeat last vertex</span>\n<span class=\"token function\">endShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Let's Make It Interactive</h2>\n<p>Let's make the drawing interactive so users can just use their mouse to draw a curve. For this, we will use three mouse event handlers - <code class=\"language-text\">mousePressed()</code>, <code class=\"language-text\">mouseDragged()</code> and <code class=\"language-text\">mouseReleased()</code>. Here is how this will work: First, when the mouse is pressed, we create an empty path. For dragging events, we add new vertex at mouse location. This will go on as long as the user keeps the mouse pressed and continues to drag.</p>\n<p>I am also going to use <code class=\"language-text\">p5.Vector</code> objects. If you are not familiar with the vector math, don't worry, I am only using it to group <code class=\"language-text\">(x, y)</code> together although there are a lot of things you can do if you understand the vector.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> pts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> strokeCol\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createCanvas</span><span class=\"token punctuation\">(</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  strokeCol <span class=\"token operator\">=</span> <span class=\"token string\">'#000'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">background</span><span class=\"token punctuation\">(</span><span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">noFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span>strokeCol<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">strokeWeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">beginShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> pt <span class=\"token operator\">=</span> pts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">curveVertex</span><span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// repeat first vertex</span>\n    <span class=\"token function\">curveVertex</span><span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> pts<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">curveVertex</span><span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// repeat last vertex</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">endShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mousePressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  pts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">p5<span class=\"token punctuation\">.</span>Vector</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  strokeCol <span class=\"token operator\">=</span> <span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mouseDragged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">p5<span class=\"token punctuation\">.</span>Vector</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><figure class=\"md-figure\"><img src=\"/static/1-5f3bf05c19344e1e6aba525ecdde359d.gif\"><figcaption>Draw a single path with mouse interaction</figcaption></figure></p>\n<h2>Make It Better</h2>\n<p>This is a pretty good start, I think, but it has a couple issues. One very obvious issue is that we can only store and draw a single path at a time. That is because we have only one array to store the points. To solve this issue, I will create a class to store all the points as well as other data instead of using a simple array. Another issue is that sometimes, I see there is a strange artifact where the path looks broken. This is because we are adding a new point for every mouse drag and sometime the two points are too close to each other, and also because of that, the path does not look very smooth.</p>\n<p>Let's tackle these issues one by one. In the code below, I create a class to represent any path. It has <code class=\"language-text\">pts</code> array to store all the point coordinates (in this case, I use <code class=\"language-text\">p5.Vector</code> objects), and has a field called <code class=\"language-text\">strokeCol</code> so I can also control the stroke color.</p>\n<p>move parts of the code from main sketch to class.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Path</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>strokeCol <span class=\"token operator\">=</span> <span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">addPoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">p5<span class=\"token punctuation\">.</span>Vector</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>strokeCol<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">beginShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> pt <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">curveVertex</span><span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">curveVertex</span><span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pts<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">curveVertex</span><span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">endShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And below is the main sketch code that uses <code class=\"language-text\">Path</code> objects. <code class=\"language-text\">paths</code> array stores multiple <code class=\"language-text\">Path</code> object, and <code class=\"language-text\">path</code> object represent the current path that we are working on.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> paths <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> path\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createCanvas</span><span class=\"token punctuation\">(</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">background</span><span class=\"token punctuation\">(</span><span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">noFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">strokeWeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> paths<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mousePressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  path <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// reset path so we can draw another one.</span>\n  path<span class=\"token punctuation\">.</span><span class=\"token function\">addPoint</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mouseDragged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  path<span class=\"token punctuation\">.</span><span class=\"token function\">addPoint</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mouseReleased</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  paths<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token comment\">// add newly created path to paths array</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, onto that weird artifacts. How can we limit the number of points added to the path while following the mouse movement? I decided to calculate the distance between the last point and the current mouse location and only if that distance is over the set threshold, then add a new point. This minimum distance requirement will make the path smoother and keep it from having too many points. I set it to 20 pixels but you can play with this value.</p>\n<p>We already have a clear class structure, so it is easy to find where we need to add the new code for calculating the minimum distance - <code class=\"language-text\">mouseDragged()</code> function because that's where we add a new point. You can, alternatively, add the same code into <code class=\"language-text\">addPoint()</code> method in the <code class=\"language-text\">Path</code> class, but I decided to keep the method as generic as possible.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">mouseDragged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> lastPt <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>pts<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span>pts<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> d <span class=\"token operator\">=</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">,</span> lastPt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> lastPt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">></span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">addPoint</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, let's add a function so we can see the path as it is being drawn again.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// call this function inside draw()</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">previewPath</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// preview current path</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>strokeCol<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">beginShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> path<span class=\"token punctuation\">.</span>pts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> pt <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>pts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">curveVertex</span><span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">curveVertex</span><span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> path<span class=\"token punctuation\">.</span>pts<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">curveVertex</span><span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">endShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><figure class=\"md-figure\"><img src=\"/static/2-2e49418a25d34c86c58b2e9424ef7c94.gif\"><figcaption>Drawing multiple paths</figcaption></figure></p>\n<h2>What next</h2>\n<p>There are many things you can do by building upon this basic code. I have a few suggestions for you - add <code class=\"language-text\">strokeWeight</code> as a class property so that it is different for each path. Add additional keyboard interactions to control different parameters. You can also look at HTML5 Canvas <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Path2D\">Path2D API</a> if you don't want to use any libraries, but it is marked as experimental, so you will need to check the browser compatibility.</p>","excerpt":"What we will build in this post In this post, I'd like to show you how you can interactively create custom paths with the mouse in p5js…","frontmatter":{"slug":"/blog/create-and-interact-with-custom-paths-in-p5js/","title":"Create And Interact With Custom Paths In p5js","subtitle":"For interactive drawing applications","date":"January 24, 2021","tags":["javascript","creative coding","canvas","p5.js"],"featuredImage":{"publicURL":"/static/da09d012586e018a1a6f8393191daa94/thumb.png"}}}},"pageContext":{"slug":"/blog/create-and-interact-with-custom-paths-in-p5js/"}},"staticQueryHashes":["1696241065","3380088787"]}